
Project_Riz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000598  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00000598  0000062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000ae  008000ae  0000067a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000067a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ec  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000948  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  000029e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006897  00000000  00000000  00002b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000886  00000000  00000000  00009407  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00009c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000314  00000000  00000000  00009d2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	55 c2       	rjmp	.+1194   	; 0x4c4 <__vector_6>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	e6 00       	.word	0x00e6	; ????
  56:	ea 00       	.word	0x00ea	; ????
  58:	ee 00       	.word	0x00ee	; ????
  5a:	f2 00       	.word	0x00f2	; ????
  5c:	f6 00       	.word	0x00f6	; ????
  5e:	fa 00       	.word	0x00fa	; ????
  60:	fe 00       	.word	0x00fe	; ????
  62:	02 01       	movw	r0, r4
  64:	06 01       	movw	r0, r12
  66:	0a 01       	movw	r0, r20

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3a       	cpi	r26, 0xAE	; 174
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	ae ea       	ldi	r26, 0xAE	; 174
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3b       	cpi	r26, 0xB3	; 179
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	6d d1       	rcall	.+730    	; 0x376 <main>
  9c:	7b c2       	rjmp	.+1270   	; 0x594 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <LCD_Command>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);    /* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);    /* Command of first row and required position<16 */
	LCD_String(str);          /* Call LCD string function */
}
  a0:	9b b3       	in	r25, 0x1b	; 27
  a2:	9f 70       	andi	r25, 0x0F	; 15
  a4:	28 2f       	mov	r18, r24
  a6:	20 7f       	andi	r18, 0xF0	; 240
  a8:	92 2b       	or	r25, r18
  aa:	9b bb       	out	0x1b, r25	; 27
  ac:	d9 98       	cbi	0x1b, 1	; 27
  ae:	db 9a       	sbi	0x1b, 3	; 27
  b0:	00 00       	nop
  b2:	db 98       	cbi	0x1b, 3	; 27
  b4:	32 e4       	ldi	r19, 0x42	; 66
  b6:	3a 95       	dec	r19
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_Command+0x16>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_Command+0x1c>
  bc:	2b b3       	in	r18, 0x1b	; 27
  be:	2f 70       	andi	r18, 0x0F	; 15
  c0:	30 e1       	ldi	r19, 0x10	; 16
  c2:	83 9f       	mul	r24, r19
  c4:	c0 01       	movw	r24, r0
  c6:	11 24       	eor	r1, r1
  c8:	82 2b       	or	r24, r18
  ca:	8b bb       	out	0x1b, r24	; 27
  cc:	db 9a       	sbi	0x1b, 3	; 27
  ce:	00 00       	nop
  d0:	db 98       	cbi	0x1b, 3	; 27
  d2:	83 ef       	ldi	r24, 0xF3	; 243
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_Command+0x36>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCD_Command+0x3c>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <LCD_Char>:
  e0:	9b b3       	in	r25, 0x1b	; 27
  e2:	9f 70       	andi	r25, 0x0F	; 15
  e4:	28 2f       	mov	r18, r24
  e6:	20 7f       	andi	r18, 0xF0	; 240
  e8:	92 2b       	or	r25, r18
  ea:	9b bb       	out	0x1b, r25	; 27
  ec:	d9 9a       	sbi	0x1b, 1	; 27
  ee:	db 9a       	sbi	0x1b, 3	; 27
  f0:	00 00       	nop
  f2:	db 98       	cbi	0x1b, 3	; 27
  f4:	32 e4       	ldi	r19, 0x42	; 66
  f6:	3a 95       	dec	r19
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_Char+0x16>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCD_Char+0x1c>
  fc:	2b b3       	in	r18, 0x1b	; 27
  fe:	2f 70       	andi	r18, 0x0F	; 15
 100:	30 e1       	ldi	r19, 0x10	; 16
 102:	83 9f       	mul	r24, r19
 104:	c0 01       	movw	r24, r0
 106:	11 24       	eor	r1, r1
 108:	82 2b       	or	r24, r18
 10a:	8b bb       	out	0x1b, r24	; 27
 10c:	db 9a       	sbi	0x1b, 3	; 27
 10e:	00 00       	nop
 110:	db 98       	cbi	0x1b, 3	; 27
 112:	83 ef       	ldi	r24, 0xF3	; 243
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_Char+0x36>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_Char+0x3c>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <LCD_Init>:
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	8a bb       	out	0x1a, r24	; 26
 124:	87 e8       	ldi	r24, 0x87	; 135
 126:	93 e1       	ldi	r25, 0x13	; 19
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_Init+0x8>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_Init+0xe>
 12e:	00 00       	nop
 130:	83 e3       	ldi	r24, 0x33	; 51
 132:	b6 df       	rcall	.-148    	; 0xa0 <LCD_Command>
 134:	82 e3       	ldi	r24, 0x32	; 50
 136:	b4 df       	rcall	.-152    	; 0xa0 <LCD_Command>
 138:	88 e2       	ldi	r24, 0x28	; 40
 13a:	b2 df       	rcall	.-156    	; 0xa0 <LCD_Command>
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	b0 df       	rcall	.-160    	; 0xa0 <LCD_Command>
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	ae df       	rcall	.-164    	; 0xa0 <LCD_Command>
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	ac df       	rcall	.-168    	; 0xa0 <LCD_Command>
 148:	83 ef       	ldi	r24, 0xF3	; 243
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_Init+0x2c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_Init+0x32>
 152:	00 00       	nop
 154:	80 e8       	ldi	r24, 0x80	; 128
 156:	a4 cf       	rjmp	.-184    	; 0xa0 <LCD_Command>
 158:	08 95       	ret

0000015a <LCD_String>:
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	ec 01       	movw	r28, r24
 160:	88 81       	ld	r24, Y
 162:	88 23       	and	r24, r24
 164:	29 f0       	breq	.+10     	; 0x170 <LCD_String+0x16>
 166:	21 96       	adiw	r28, 0x01	; 1
 168:	bb df       	rcall	.-138    	; 0xe0 <LCD_Char>
 16a:	89 91       	ld	r24, Y+
 16c:	81 11       	cpse	r24, r1
 16e:	fc cf       	rjmp	.-8      	; 0x168 <LCD_String+0xe>
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);          /* Clear display */
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	93 df       	rcall	.-218    	; 0xa0 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	83 ef       	ldi	r24, 0xF3	; 243
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCD_Clear+0x8>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCD_Clear+0xe>
 184:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);          /* Cursor 1st row 0th position */
 186:	80 e8       	ldi	r24, 0x80	; 128
 188:	8b cf       	rjmp	.-234    	; 0xa0 <LCD_Command>
 18a:	08 95       	ret

0000018c <changeMinute>:
	changeMinute(minutesAlarmFinish1);
	changeHour(hoursAlarmFinish1);
	showNumber(hoursAlarmFinish1,minutesAlarmFinish1,0);
}
void changeMinute(unsigned char m){
	if((PINB & 0x08)==0){
 18c:	b3 99       	sbic	0x16, 3	; 22
 18e:	09 c0       	rjmp	.+18     	; 0x1a2 <changeMinute+0x16>
 190:	2f e3       	ldi	r18, 0x3F	; 63
 192:	8d e0       	ldi	r24, 0x0D	; 13
 194:	93 e0       	ldi	r25, 0x03	; 3
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <changeMinute+0xa>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <changeMinute+0x14>
 1a0:	00 00       	nop
 1a2:	08 95       	ret

000001a4 <changeHour>:
		_delay_ms(1000);
	}
}

void changeHour(unsigned char h){
	if((PINB & 0x10)==0){
 1a4:	b4 99       	sbic	0x16, 4	; 22
 1a6:	09 c0       	rjmp	.+18     	; 0x1ba <changeHour+0x16>
 1a8:	2f e3       	ldi	r18, 0x3F	; 63
 1aa:	8d e0       	ldi	r24, 0x0D	; 13
 1ac:	93 e0       	ldi	r25, 0x03	; 3
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <changeHour+0xa>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <changeHour+0x14>
 1b8:	00 00       	nop
 1ba:	08 95       	ret

000001bc <DigitToLCDEncoder>:
}

unsigned char DigitToLCDEncoder(unsigned char digit)
{
	
	switch(digit)
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	8a 30       	cpi	r24, 0x0A	; 10
 1c0:	91 05       	cpc	r25, r1
 1c2:	58 f5       	brcc	.+86     	; 0x21a <DigitToLCDEncoder+0x5e>
 1c4:	fc 01       	movw	r30, r24
 1c6:	e6 5d       	subi	r30, 0xD6	; 214
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	de c1       	rjmp	.+956    	; 0x588 <__tablejump2__>
	{
		case 0:  LCD_String("0");
 1cc:	8f e8       	ldi	r24, 0x8F	; 143
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	c4 cf       	rjmp	.-120    	; 0x15a <LCD_String>
		break;
 1d2:	08 95       	ret
		case 1: LCD_String("1");
 1d4:	81 e9       	ldi	r24, 0x91	; 145
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	c0 cf       	rjmp	.-128    	; 0x15a <LCD_String>
		break;
		case 2:  LCD_String("2");
 1da:	08 95       	ret
 1dc:	83 e9       	ldi	r24, 0x93	; 147
 1de:	90 e0       	ldi	r25, 0x00	; 0
		break;
 1e0:	bc cf       	rjmp	.-136    	; 0x15a <LCD_String>
		case 3:  LCD_String("3");
 1e2:	08 95       	ret
 1e4:	85 e9       	ldi	r24, 0x95	; 149
 1e6:	90 e0       	ldi	r25, 0x00	; 0
		break;
 1e8:	b8 cf       	rjmp	.-144    	; 0x15a <LCD_String>
		case 4:  LCD_String("4");
 1ea:	08 95       	ret
 1ec:	87 e9       	ldi	r24, 0x97	; 151
 1ee:	90 e0       	ldi	r25, 0x00	; 0
		break;
 1f0:	b4 cf       	rjmp	.-152    	; 0x15a <LCD_String>
		case 5:  LCD_String("5");
 1f2:	08 95       	ret
 1f4:	89 e9       	ldi	r24, 0x99	; 153
 1f6:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 6:  LCD_String("6");
 1f8:	b0 cf       	rjmp	.-160    	; 0x15a <LCD_String>
 1fa:	08 95       	ret
 1fc:	8b e9       	ldi	r24, 0x9B	; 155
		break;
 1fe:	90 e0       	ldi	r25, 0x00	; 0
		case 7:  LCD_String("7");
 200:	ac cf       	rjmp	.-168    	; 0x15a <LCD_String>
 202:	08 95       	ret
 204:	8d e9       	ldi	r24, 0x9D	; 157
		break;
 206:	90 e0       	ldi	r25, 0x00	; 0
		case 8:  LCD_String("8");
 208:	a8 cf       	rjmp	.-176    	; 0x15a <LCD_String>
 20a:	08 95       	ret
 20c:	8f e9       	ldi	r24, 0x9F	; 159
 20e:	90 e0       	ldi	r25, 0x00	; 0
		break;
 210:	a4 cf       	rjmp	.-184    	; 0x15a <LCD_String>
		case 9:  LCD_String("9");
 212:	08 95       	ret
 214:	81 ea       	ldi	r24, 0xA1	; 161
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	a0 cf       	rjmp	.-192    	; 0x15a <LCD_String>
	}
}
 21a:	08 95       	ret

0000021c <showNumber>:
		}
		_delay_ms(1000);
	}
}

void showNumber(unsigned char h,unsigned char m,unsigned char s){
 21c:	ff 92       	push	r15
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	f8 2e       	mov	r15, r24
 228:	06 2f       	mov	r16, r22
 22a:	14 2f       	mov	r17, r20
	
	LCD_Clear();
 22c:	a4 df       	rcall	.-184    	; 0x176 <LCD_Clear>
	LCD_String (" Time= ");
 22e:	83 ea       	ldi	r24, 0xA3	; 163
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	93 df       	rcall	.-218    	; 0x15a <LCD_String>
	DigitToLCDEncoder (h/10);
 234:	cd ec       	ldi	r28, 0xCD	; 205
 236:	fc 9e       	mul	r15, r28
 238:	d1 2d       	mov	r29, r1
 23a:	11 24       	eor	r1, r1
 23c:	d6 95       	lsr	r29
 23e:	d6 95       	lsr	r29
 240:	d6 95       	lsr	r29
 242:	8d 2f       	mov	r24, r29
 244:	bb df       	rcall	.-138    	; 0x1bc <DigitToLCDEncoder>
	DigitToLCDEncoder (h%10);
 246:	dd 0f       	add	r29, r29
 248:	8d 2f       	mov	r24, r29
 24a:	88 0f       	add	r24, r24
 24c:	88 0f       	add	r24, r24
 24e:	d8 0f       	add	r29, r24
 250:	8f 2d       	mov	r24, r15
 252:	8d 1b       	sub	r24, r29
	LCD_String (":");
 254:	b3 df       	rcall	.-154    	; 0x1bc <DigitToLCDEncoder>
 256:	8b ea       	ldi	r24, 0xAB	; 171
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	7f df       	rcall	.-258    	; 0x15a <LCD_String>
	DigitToLCDEncoder (m/10);
 25c:	0c 9f       	mul	r16, r28
 25e:	d1 2d       	mov	r29, r1
 260:	11 24       	eor	r1, r1
 262:	d6 95       	lsr	r29
 264:	d6 95       	lsr	r29
 266:	d6 95       	lsr	r29
 268:	8d 2f       	mov	r24, r29
 26a:	a8 df       	rcall	.-176    	; 0x1bc <DigitToLCDEncoder>
	DigitToLCDEncoder (m%10);
 26c:	dd 0f       	add	r29, r29
 26e:	8d 2f       	mov	r24, r29
 270:	88 0f       	add	r24, r24
 272:	88 0f       	add	r24, r24
 274:	d8 0f       	add	r29, r24
 276:	80 2f       	mov	r24, r16
 278:	8d 1b       	sub	r24, r29
	LCD_String (":");
 27a:	a0 df       	rcall	.-192    	; 0x1bc <DigitToLCDEncoder>
 27c:	8b ea       	ldi	r24, 0xAB	; 171
 27e:	90 e0       	ldi	r25, 0x00	; 0
	DigitToLCDEncoder (s/10);
 280:	6c df       	rcall	.-296    	; 0x15a <LCD_String>
 282:	1c 9f       	mul	r17, r28
 284:	c1 2d       	mov	r28, r1
 286:	11 24       	eor	r1, r1
 288:	c6 95       	lsr	r28
 28a:	c6 95       	lsr	r28
 28c:	c6 95       	lsr	r28
 28e:	8c 2f       	mov	r24, r28
	DigitToLCDEncoder (s%10);
 290:	95 df       	rcall	.-214    	; 0x1bc <DigitToLCDEncoder>
 292:	cc 0f       	add	r28, r28
 294:	8c 2f       	mov	r24, r28
 296:	88 0f       	add	r24, r24
 298:	88 0f       	add	r24, r24
 29a:	c8 0f       	add	r28, r24
 29c:	81 2f       	mov	r24, r17
 29e:	8c 1b       	sub	r24, r28
 2a0:	8d df       	rcall	.-230    	; 0x1bc <DigitToLCDEncoder>
 2a2:	2f e3       	ldi	r18, 0x3F	; 63
 2a4:	8d e0       	ldi	r24, 0x0D	; 13
 2a6:	93 e0       	ldi	r25, 0x03	; 3
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <showNumber+0x8c>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <showNumber+0x96>
 2b2:	00 00       	nop
	_delay_ms(1000);
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	ff 90       	pop	r15
 2be:	08 95       	ret

000002c0 <state0>:
	}
	return 0;
}

void state0(){
	changeMinute(minutes);
 2c0:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <minutes>
 2c4:	63 df       	rcall	.-314    	; 0x18c <changeMinute>
	changeHour(hours);
 2c6:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <hours>
 2ca:	6c df       	rcall	.-296    	; 0x1a4 <changeHour>
	showNumber(hours,minutes,seconds);
 2cc:	40 91 b0 00 	lds	r20, 0x00B0	; 0x8000b0 <seconds>
 2d0:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <minutes>
 2d4:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <hours>
 2d8:	a1 cf       	rjmp	.-190    	; 0x21c <showNumber>
 2da:	08 95       	ret

000002dc <state1>:
}

void state1(){
	showNumber(year,month,day);
 2dc:	40 91 8e 00 	lds	r20, 0x008E	; 0x80008e <day>
 2e0:	60 91 8d 00 	lds	r22, 0x008D	; 0x80008d <month>
 2e4:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <year>
 2e8:	99 cf       	rjmp	.-206    	; 0x21c <showNumber>
 2ea:	08 95       	ret

000002ec <state2>:
}

void state2(){
	changeMinute(minutesAlarmStart0);
 2ec:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <minutesAlarmStart0>
 2f0:	4d df       	rcall	.-358    	; 0x18c <changeMinute>
	changeHour(hoursAlarmStart0);
 2f2:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <hoursAlarmStart0>
 2f6:	56 df       	rcall	.-340    	; 0x1a4 <changeHour>
	showNumber(hoursAlarmStart0,minutesAlarmStart0,0);
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	60 91 8b 00 	lds	r22, 0x008B	; 0x80008b <minutesAlarmStart0>
 2fe:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <hoursAlarmStart0>
 302:	8c cf       	rjmp	.-232    	; 0x21c <showNumber>
 304:	08 95       	ret

00000306 <state3>:
}

void state3(){
	changeMinute(minutesAlarmFinish0);
 306:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <minutesAlarmFinish0>
 30a:	40 df       	rcall	.-384    	; 0x18c <changeMinute>
	changeHour(hoursAlarmFinish0);
 30c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <hoursAlarmFinish0>
 310:	49 df       	rcall	.-366    	; 0x1a4 <changeHour>
	showNumber(hoursAlarmFinish0,minutesAlarmFinish0,0);
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <minutesAlarmFinish0>
 318:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <hoursAlarmFinish0>
 31c:	7f cf       	rjmp	.-258    	; 0x21c <showNumber>
 31e:	08 95       	ret

00000320 <state4>:
}
void state4(){
	changeMinute(minutesAlarmStart1);
 320:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <minutesAlarmStart1>
 324:	33 df       	rcall	.-410    	; 0x18c <changeMinute>
	changeHour(hoursAlarmStart1);
 326:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <hoursAlarmStart1>
 32a:	3c df       	rcall	.-392    	; 0x1a4 <changeHour>
	showNumber(hoursAlarmStart1,minutesAlarmStart1,0);
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	60 91 87 00 	lds	r22, 0x0087	; 0x800087 <minutesAlarmStart1>
 332:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <hoursAlarmStart1>
 336:	72 cf       	rjmp	.-284    	; 0x21c <showNumber>
 338:	08 95       	ret

0000033a <state5>:
}
void state5(){
	changeMinute(minutesAlarmFinish1);
 33a:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <minutesAlarmFinish1>
 33e:	26 df       	rcall	.-436    	; 0x18c <changeMinute>
	changeHour(hoursAlarmFinish1);
 340:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <hoursAlarmFinish1>
 344:	2f df       	rcall	.-418    	; 0x1a4 <changeHour>
	showNumber(hoursAlarmFinish1,minutesAlarmFinish1,0);
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	60 91 85 00 	lds	r22, 0x0085	; 0x800085 <minutesAlarmFinish1>
 34c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <hoursAlarmFinish1>
 350:	65 cf       	rjmp	.-310    	; 0x21c <showNumber>
 352:	08 95       	ret

00000354 <alarm>:
		break;
		case 9:  LCD_String("9");
	}
}
void alarm(){
	if (hours==hoursAlarmStart0 && minutes == minutesAlarmStart0)
 354:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <hours>
 358:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <hoursAlarmStart0>
 35c:	98 13       	cpse	r25, r24
 35e:	09 c0       	rjmp	.+18     	; 0x372 <alarm+0x1e>
 360:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <minutes>
 364:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <minutesAlarmStart0>
 368:	98 13       	cpse	r25, r24
 36a:	03 c0       	rjmp	.+6      	; 0x372 <alarm+0x1e>
	{
		PORTD =0xFF;
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	82 bb       	out	0x12, r24	; 18
 370:	08 95       	ret
		}else{
		PORTD =0x00;
 372:	12 ba       	out	0x12, r1	; 18
 374:	08 95       	ret

00000376 <main>:


int main (void)
{
	
	LCD_Init();
 376:	d4 de       	rcall	.-600    	; 0x120 <LCD_Init>
	
	TCCR1B = (1<<CS12|1<<WGM12);
 378:	8c e0       	ldi	r24, 0x0C	; 12
 37a:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 15625-1;
 37c:	88 e0       	ldi	r24, 0x08	; 8
 37e:	9d e3       	ldi	r25, 0x3D	; 61
 380:	9b bd       	out	0x2b, r25	; 43
 382:	8a bd       	out	0x2a, r24	; 42
	TIMSK = 1<<OCIE1A;
 384:	80 e1       	ldi	r24, 0x10	; 16
 386:	89 bf       	out	0x39, r24	; 57
	
	DDRD = 0xFF;
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	81 bb       	out	0x11, r24	; 17
	PORTB = 0XFF;
 38c:	88 bb       	out	0x18, r24	; 24
	DDRC = 0XFF;
 38e:	84 bb       	out	0x14, r24	; 20
	//PINB = 0xFF;

	sei();
 390:	78 94       	sei
	
	while(1)
	{
		alarm();
		if((PINB & 0x01)==0 & stateTable[cs][0]!=-1){
 392:	c1 e0       	ldi	r28, 0x01	; 1
 394:	dc 2f       	mov	r29, r28

	sei();
	
	while(1)
	{
		alarm();
 396:	10 e0       	ldi	r17, 0x00	; 0
 398:	dd df       	rcall	.-70     	; 0x354 <alarm>
		if((PINB & 0x01)==0 & stateTable[cs][0]!=-1){
 39a:	86 b3       	in	r24, 0x16	; 22
 39c:	20 91 ae 00 	lds	r18, 0x00AE	; 0x8000ae <__data_end>
 3a0:	30 91 af 00 	lds	r19, 0x00AF	; 0x8000af <__data_end+0x1>
 3a4:	f9 01       	movw	r30, r18
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	e2 0f       	add	r30, r18
 3ac:	f3 1f       	adc	r31, r19
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	e0 5a       	subi	r30, 0xA0	; 160
 3b4:	ff 4f       	sbci	r31, 0xFF	; 255
 3b6:	40 81       	ld	r20, Z
 3b8:	51 81       	ldd	r21, Z+1	; 0x01
 3ba:	81 70       	andi	r24, 0x01	; 1
 3bc:	8c 17       	cp	r24, r28
 3be:	b1 f0       	breq	.+44     	; 0x3ec <main+0x76>
 3c0:	8d 2f       	mov	r24, r29
 3c2:	4f 3f       	cpi	r20, 0xFF	; 255
 3c4:	9f ef       	ldi	r25, 0xFF	; 255
 3c6:	59 07       	cpc	r21, r25
 3c8:	09 f4       	brne	.+2      	; 0x3cc <main+0x56>
 3ca:	81 2f       	mov	r24, r17
 3cc:	88 23       	and	r24, r24
 3ce:	71 f0       	breq	.+28     	; 0x3ec <main+0x76>
			cs=stateTable[cs][0];
 3d0:	50 93 af 00 	sts	0x00AF, r21	; 0x8000af <__data_end+0x1>
 3d4:	40 93 ae 00 	sts	0x00AE, r20	; 0x8000ae <__data_end>
 3d8:	2f e3       	ldi	r18, 0x3F	; 63
 3da:	8d e0       	ldi	r24, 0x0D	; 13
 3dc:	93 e0       	ldi	r25, 0x03	; 3
 3de:	21 50       	subi	r18, 0x01	; 1
 3e0:	80 40       	sbci	r24, 0x00	; 0
 3e2:	90 40       	sbci	r25, 0x00	; 0
 3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x68>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x72>
 3e8:	00 00       	nop
 3ea:	4c c0       	rjmp	.+152    	; 0x484 <__stack+0x25>
			_delay_ms(1000);
		}
		else if((PINB & 0x02)==0 & stateTable[cs][1]!=-1){
 3ec:	86 b3       	in	r24, 0x16	; 22
 3ee:	f9 01       	movw	r30, r18
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	e2 0f       	add	r30, r18
 3f6:	f3 1f       	adc	r31, r19
 3f8:	ee 0f       	add	r30, r30
 3fa:	ff 1f       	adc	r31, r31
 3fc:	e0 5a       	subi	r30, 0xA0	; 160
 3fe:	ff 4f       	sbci	r31, 0xFF	; 255
 400:	42 81       	ldd	r20, Z+2	; 0x02
 402:	53 81       	ldd	r21, Z+3	; 0x03
 404:	86 95       	lsr	r24
 406:	81 70       	andi	r24, 0x01	; 1
 408:	8c 17       	cp	r24, r28
 40a:	b1 f0       	breq	.+44     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 40c:	8d 2f       	mov	r24, r29
 40e:	4f 3f       	cpi	r20, 0xFF	; 255
 410:	9f ef       	ldi	r25, 0xFF	; 255
 412:	59 07       	cpc	r21, r25
 414:	09 f4       	brne	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	81 2f       	mov	r24, r17
 418:	88 23       	and	r24, r24
 41a:	71 f0       	breq	.+28     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
			cs=stateTable[cs][1];
 41c:	50 93 af 00 	sts	0x00AF, r21	; 0x8000af <__data_end+0x1>
 420:	40 93 ae 00 	sts	0x00AE, r20	; 0x8000ae <__data_end>
 424:	2f e3       	ldi	r18, 0x3F	; 63
 426:	82 e4       	ldi	r24, 0x42	; 66
 428:	9f e0       	ldi	r25, 0x0F	; 15
 42a:	21 50       	subi	r18, 0x01	; 1
 42c:	80 40       	sbci	r24, 0x00	; 0
 42e:	90 40       	sbci	r25, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 434:	00 00       	nop
 436:	26 c0       	rjmp	.+76     	; 0x484 <__stack+0x25>
			_delay_ms(5000);
		}
		else if((PINB & 0x04)==0 & stateTable[cs][2]!=-1){
 438:	86 b3       	in	r24, 0x16	; 22
 43a:	f9 01       	movw	r30, r18
 43c:	ee 0f       	add	r30, r30
 43e:	ff 1f       	adc	r31, r31
 440:	e2 0f       	add	r30, r18
 442:	f3 1f       	adc	r31, r19
 444:	ee 0f       	add	r30, r30
 446:	ff 1f       	adc	r31, r31
 448:	e0 5a       	subi	r30, 0xA0	; 160
 44a:	ff 4f       	sbci	r31, 0xFF	; 255
 44c:	24 81       	ldd	r18, Z+4	; 0x04
 44e:	35 81       	ldd	r19, Z+5	; 0x05
 450:	82 fb       	bst	r24, 2
 452:	88 27       	eor	r24, r24
 454:	80 f9       	bld	r24, 0
 456:	8c 17       	cp	r24, r28
 458:	a9 f0       	breq	.+42     	; 0x484 <__stack+0x25>
 45a:	8d 2f       	mov	r24, r29
 45c:	2f 3f       	cpi	r18, 0xFF	; 255
 45e:	9f ef       	ldi	r25, 0xFF	; 255
 460:	39 07       	cpc	r19, r25
 462:	09 f4       	brne	.+2      	; 0x466 <__stack+0x7>
 464:	81 2f       	mov	r24, r17
 466:	88 23       	and	r24, r24
 468:	69 f0       	breq	.+26     	; 0x484 <__stack+0x25>
			cs=stateTable[cs][2];
 46a:	30 93 af 00 	sts	0x00AF, r19	; 0x8000af <__data_end+0x1>
 46e:	20 93 ae 00 	sts	0x00AE, r18	; 0x8000ae <__data_end>
 472:	2f e3       	ldi	r18, 0x3F	; 63
 474:	8d e0       	ldi	r24, 0x0D	; 13
 476:	93 e0       	ldi	r25, 0x03	; 3
 478:	21 50       	subi	r18, 0x01	; 1
 47a:	80 40       	sbci	r24, 0x00	; 0
 47c:	90 40       	sbci	r25, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <__stack+0x19>
 480:	00 c0       	rjmp	.+0      	; 0x482 <__stack+0x23>
 482:	00 00       	nop
			_delay_ms(1000);
		}

		switch(cs){
 484:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 488:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <__data_end+0x1>
 48c:	82 30       	cpi	r24, 0x02	; 2
 48e:	91 05       	cpc	r25, r1
 490:	89 f0       	breq	.+34     	; 0x4b4 <__stack+0x55>
 492:	2c f4       	brge	.+10     	; 0x49e <__stack+0x3f>
 494:	00 97       	sbiw	r24, 0x00	; 0
 496:	51 f0       	breq	.+20     	; 0x4ac <__stack+0x4d>
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	51 f0       	breq	.+20     	; 0x4b0 <__stack+0x51>
 49c:	7d cf       	rjmp	.-262    	; 0x398 <main+0x22>
 49e:	84 30       	cpi	r24, 0x04	; 4
 4a0:	91 05       	cpc	r25, r1
 4a2:	61 f0       	breq	.+24     	; 0x4bc <__stack+0x5d>
 4a4:	4c f0       	brlt	.+18     	; 0x4b8 <__stack+0x59>
 4a6:	05 97       	sbiw	r24, 0x05	; 5
 4a8:	59 f0       	breq	.+22     	; 0x4c0 <__stack+0x61>
			case 0: state0();
 4aa:	76 cf       	rjmp	.-276    	; 0x398 <main+0x22>
			break;
			case 1: state1();
 4ac:	09 df       	rcall	.-494    	; 0x2c0 <state0>
			break;
 4ae:	74 cf       	rjmp	.-280    	; 0x398 <main+0x22>
			case 2: state2();
 4b0:	15 df       	rcall	.-470    	; 0x2dc <state1>
			break;
			case 3: state3();
 4b2:	72 cf       	rjmp	.-284    	; 0x398 <main+0x22>
 4b4:	1b df       	rcall	.-458    	; 0x2ec <state2>
			break;
 4b6:	70 cf       	rjmp	.-288    	; 0x398 <main+0x22>
			case 4: state4();
 4b8:	26 df       	rcall	.-436    	; 0x306 <state3>
 4ba:	6e cf       	rjmp	.-292    	; 0x398 <main+0x22>
			break;
 4bc:	31 df       	rcall	.-414    	; 0x320 <state4>
			case 5: state5();
 4be:	6c cf       	rjmp	.-296    	; 0x398 <main+0x22>
 4c0:	3c df       	rcall	.-392    	; 0x33a <state5>
			break;
 4c2:	6a cf       	rjmp	.-300    	; 0x398 <main+0x22>

000004c4 <__vector_6>:
	}

}

ISR(TIMER1_COMPA_vect)
{
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	8f 93       	push	r24
 4d0:	9f 93       	push	r25
	seconds++;
 4d2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <seconds>
 4d6:	8f 5f       	subi	r24, 0xFF	; 255
 4d8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <seconds>
	if(seconds == 60){
 4dc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <seconds>
 4e0:	8c 33       	cpi	r24, 0x3C	; 60
 4e2:	39 f4       	brne	.+14     	; 0x4f2 <__vector_6+0x2e>
		seconds = 0;
 4e4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <seconds>
		minutes++;
 4e8:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <minutes>
 4ec:	8f 5f       	subi	r24, 0xFF	; 255
 4ee:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <minutes>
	}
	if(minutes == 60){
 4f2:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <minutes>
 4f6:	8c 33       	cpi	r24, 0x3C	; 60
 4f8:	39 f4       	brne	.+14     	; 0x508 <__vector_6+0x44>
		minutes = 0;
 4fa:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <minutes>
		hours++;
 4fe:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <hours>
 502:	8f 5f       	subi	r24, 0xFF	; 255
 504:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <hours>
	}
	if(hours > 23){
 508:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <hours>
 50c:	88 31       	cpi	r24, 0x18	; 24
 50e:	38 f0       	brcs	.+14     	; 0x51e <__vector_6+0x5a>
		hours = 0;
 510:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <hours>
		day++;
 514:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <day>
 518:	8f 5f       	subi	r24, 0xFF	; 255
 51a:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <day>
	}
	if(day == 31 && month > 7){
 51e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <day>
 522:	8f 31       	cpi	r24, 0x1F	; 31
 524:	59 f4       	brne	.+22     	; 0x53c <__vector_6+0x78>
 526:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <month>
 52a:	88 30       	cpi	r24, 0x08	; 8
 52c:	98 f0       	brcs	.+38     	; 0x554 <__vector_6+0x90>
		day = 1;
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <day>
		month++;
 534:	8f 5f       	subi	r24, 0xFF	; 255
 536:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <month>
 53a:	0c c0       	rjmp	.+24     	; 0x554 <__vector_6+0x90>
	}
	if(day == 32 && month < 7){
 53c:	80 32       	cpi	r24, 0x20	; 32
 53e:	51 f4       	brne	.+20     	; 0x554 <__vector_6+0x90>
 540:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <month>
 544:	87 30       	cpi	r24, 0x07	; 7
 546:	30 f4       	brcc	.+12     	; 0x554 <__vector_6+0x90>
		day = 1;
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <day>
		month++;
 54e:	8f 5f       	subi	r24, 0xFF	; 255
 550:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <month>
	}
	if(month == 13){
 554:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <month>
 558:	8d 30       	cpi	r24, 0x0D	; 13
 55a:	41 f4       	brne	.+16     	; 0x56c <__vector_6+0xa8>
		month = 1;
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <month>
		year++;
 562:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <year>
 566:	8f 5f       	subi	r24, 0xFF	; 255
 568:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <year>
	}
	if(year > 99){
 56c:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <year>
 570:	84 36       	cpi	r24, 0x64	; 100
 572:	18 f0       	brcs	.+6      	; 0x57a <__vector_6+0xb6>
		year = 97;
 574:	81 e6       	ldi	r24, 0x61	; 97
 576:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <year>
	}
	
}
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <__tablejump2__>:
 588:	ee 0f       	add	r30, r30
 58a:	ff 1f       	adc	r31, r31
 58c:	05 90       	lpm	r0, Z+
 58e:	f4 91       	lpm	r31, Z
 590:	e0 2d       	mov	r30, r0
 592:	09 94       	ijmp

00000594 <_exit>:
 594:	f8 94       	cli

00000596 <__stop_program>:
 596:	ff cf       	rjmp	.-2      	; 0x596 <__stop_program>
